/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

// Swedish definitions
#define SE_AE    LBKT        // Å
#define SE_AA    SQT         // Ä
#define SE_OO    SEMI        // Ö
#define SE_EXCL  LS(N1)      // !
#define SE_AT    RA(N2)      // @
#define SE_HASH  LS(N3)      // #
#define SE_DLLR  RA(N4)      // $
#define SE_PRCNT LS(N5)      // %
#define SE_AMPS  LS(N6)      // &
#define SE_FSLH  LS(N7)      // /
#define SE_STAR  LS(BSLH)    // *
#define SE_CARET RBRC        // ^
#define SE_LPAR  LS(N8)      // (
#define SE_RPAR  LS(N9)      // )
#define SE_LBKT  RA(N8)      // [
#define SE_RBKT  RA(N9)      // ]
#define SE_LBRC  RA(N7)      // {
#define SE_RBRC  RA(N0)      // }
#define SE_PLUS  MINUS       // +
#define SE_DASH  FSLH        // -
#define SE_EQUAL LS(N0)      // =
#define SE_QMARK LS(SE_PLUS) // ?
#define SE_UNDER LS(SE_DASH) // _
#define SE_DQT   LS(N2)      // "
#define SE_SQT   BSLH        // '
#define SE_GRAVE PLUS        // ´
#define SE_TILDE RA(RBKT)    // ~
#define SE_LT    NON_US_BACKSLASH // <
#define SE_GT    LS(SE_LT)   // >
#define SE_PIPE  RA(SE_LT)   // |
#define SE_BSLH  RA(SE_PLUS) // \

#define DEFAULT     0
#define QWERTY      1
#define GAMING      2
#define SYMBOLS_ENG 3
#define SYMBOLS_SWE 4
#define FUNC        5
#define NUMBER      6
#define SETTINGS    7

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hs: homerow_mods_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_SLOW";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    cond_layers {
        compatible = "zmk,conditional-layers";
        // Define SETTINGS layer as tri-state
        func_tristate {
            if-layers = <SYMBOLS_SWE FUNC>;
            then-layer = <SETTINGS>;
        };
    };

/*           34 Keys
╭──────────────╮ ╭──────────────╮
│ 0  1  2  3  4│ │ 5  6  7  8  9│
│10 11 12 13 14│ │15 16 17 18 19│
│20 21 22 23 24│ │25 26 27 28 29│
╰────────╮30 31│ │32 33╭────────╯
         ╰─────╯ ╰─────╯       */
/*    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    }; */

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp Q       &kp W       &kp F         &kp P           &kp B       &kp J                 &kp L         &kp U         &kp Y       &kp DEL
            &hs LGUI A  &hm LALT R  &hm LSHIFT S  &hm LCTRL T     &kp G       &kp M                 &hm RCTRL N   &hm RSHIFT E  &hm RALT I  &hs RGUI O
            &kp Z       &kp X       &kp C         &kp D           &kp V       &kp K                 &kp H         &kp COMMA     &kp DOT     &kp ENTER
                                                  &lt NUMBER TAB  &kp SPACE   &lt SYMBOLS_SWE BSPC  &lt FUNC ESC

            >;
        };

        qwerty_layer {
            bindings = <
            &kp Q       &kp W       &kp E         &kp R           &kp T       &kp Y                 &kp U         &kp I         &kp O       &kp P
            &hs LGUI A  &hm LALT S  &hm LSHIFT D  &hm LCTRL F     &kp G       &kp H                 &hm RCTRL J   &hm RSHIFT J  &hm RALT L  &hs RGUI BSPC
            &kp Z       &kp X       &kp C         &kp V           &kp B       &kp N                 &kp M         &kp COMMA     &kp DOT     &kp ENTER
                                                  &lt NUMBER TAB  &kp SPACE   &lt SYMBOLS_SWE BSPC  &lt FUNC ESC
            >;
        };

        gaming_layer {
            bindings = <
            &kp N1      &kp N2  &kp N3  &kp N4     &kp N5     &kp J            &kp L        &kp U         &kp Y       &kp BSPC
            &kp TAB     &kp Q   &kp W   &kp E      &kp R      &kp M            &hm RCTRL N  &hm RSHIFT E  &hm RALT I  &hs RGUI O
            &kp LSHIFT  &kp A   &kp S   &kp D      &kp F      &kp M            &kp N        &kp E         &kp I       &kp O
                                        &kp LCTRL  &kp SPACE  &mo SYMBOLS_SWE  &mo FUNC
            >;
        };

        symbols_eng_layer {
            bindings = <
            &kp DQT       &kp AT         &kp EXCL         &kp PLUS         &kp BSLH    &kp LPAR   &kp RPAR          &kp UNDER         &kp QMARK      &kp N0
            &hs LGUI SQT  &hm LALT AMPS  &hm LSHIFT STAR  &hm LCTRL GRAVE  &kp LBKT    &kp MINUS  &hm RCTRL TILDE2  &hm RSHIFT EQUAL  &hm RALT PIPE  &hs RGUI N1
            &kp PRCNT     &kp HASH       &kp CARET        &kp DLLR         &kp RBKT    &kp LBRC   &kp RBRC          &kp GT            &kp LT         &kp N2
                                                          &kp FSLH         &kp SPACE   &trans     &trans
            >;
        };

        symbols_swe_layer {
            bindings = <
            &kp SE_DQT       &kp SE_AT         &kp SE_EXCL         &kp SE_PLUS         &kp SE_BSLH   &kp SE_LPAR  &kp SE_RPAR         &kp SE_UNDER         &kp SE_QMARK      &kp SE_AE
            &hs LGUI SE_SQT  &hm LALT SE_AMPS  &hm LSHIFT SE_STAR  &hm LCTRL SE_GRAVE  &kp SE_LBKT   &kp SE_DASH  &hm RCTRL SE_TILDE  &hm RSHIFT SE_EQUAL  &hm RALT SE_PIPE  &hs RGUI SE_AA
            &kp SE_PRCNT     &kp SE_HASH       &kp SE_CARET        &kp SE_DLLR         &kp SE_RBKT   &kp SE_LBRC  &kp SE_RBRC         &kp SE_LT            &kp SE_GT         &kp SE_OO
                                                                   &kp SE_FSLH         &kp SPACE     &trans       &trans
            >;
        };

        func_layer {
            bindings = <
            &kp ESC   &kp F1  &kp F2   &kp F3   &kp F4     &kp HOME    &kp PG_UP  &kp UP      &kp PG_DN   &kp DEL
            &kp TAB   &kp F5  &kp F6   &kp F7   &kp F8     &kp END     &kp LEFT   &kp DOWN    &kp RIGHT   &kp K_VOL_UP
            &kp CAPS  &kp F9  &kp F10  &kp F10  &kp F12    &kp C_PREV  &kp C_PP   &kp C_NEXT  &kp K_MUTE  &kp K_VOL_DN
                                       &kp N3   &kp SPACE  &trans      &trans
            >;
        };

        number_layer {
            bindings = <
            &kp N1    &kp N2    &kp N3      &kp N4     &kp N5     &kp N6    &kp N7        &kp N8         &kp N9       &kp N0
            &kp LGUI  &kp LALT  &kp LSHIFT  &kp LCTRL  &trans     &trans    &hm RCTRL N4  &hm RSHIFT N5  &hm RALT N6  &hm RGUI COMMA
            &trans    &trans    &trans      &trans     &trans     &trans    &kp N1        &kp N2         &kp N3       &kp DOT
                                            &trans     &kp SPACE  &kp BSPC  &kp N0
            >;
        };

        settings_layer {
            bindings = <
            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &ext_power EP_ON  &ext_power EP_OFF  &trans      &trans  &trans
            &bt BT_CLR    &trans        &trans        &trans        &trans         &trans            &to QWERTY         &to DEFAULT &trans  &to GAMING
            &out OUT_BLE  &out OUT_USB  &trans        &trans        &bootloader    &bootloader       &trans             &trans      &trans  &kp ENTER
                                                      &trans        &kp SPACE      &trans            &trans
            >;
        };
    };
};
